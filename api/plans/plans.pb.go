// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: plans/plans.proto

package plans

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlanType int32

const (
	PlanType_Unlimited         PlanType = 0
	PlanType_FUP               PlanType = 1
	PlanType_SME               PlanType = 2
	PlanType_SME_FUP           PlanType = 3
	PlanType_TopUpDataBoosters PlanType = 4
)

// Enum value maps for PlanType.
var (
	PlanType_name = map[int32]string{
		0: "Unlimited",
		1: "FUP",
		2: "SME",
		3: "SME_FUP",
		4: "TopUpDataBoosters",
	}
	PlanType_value = map[string]int32{
		"Unlimited":         0,
		"FUP":               1,
		"SME":               2,
		"SME_FUP":           3,
		"TopUpDataBoosters": 4,
	}
)

func (x PlanType) Enum() *PlanType {
	p := new(PlanType)
	*p = x
	return p
}

func (x PlanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanType) Descriptor() protoreflect.EnumDescriptor {
	return file_plans_plans_proto_enumTypes[0].Descriptor()
}

func (PlanType) Type() protoreflect.EnumType {
	return &file_plans_plans_proto_enumTypes[0]
}

func (x PlanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanType.Descriptor instead.
func (PlanType) EnumDescriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{0}
}

type DataUnitType int32

const (
	DataUnitType_B  DataUnitType = 0
	DataUnitType_KB DataUnitType = 1
	DataUnitType_MB DataUnitType = 2
	DataUnitType_GB DataUnitType = 3
	DataUnitType_TB DataUnitType = 4
)

// Enum value maps for DataUnitType.
var (
	DataUnitType_name = map[int32]string{
		0: "B",
		1: "KB",
		2: "MB",
		3: "GB",
		4: "TB",
	}
	DataUnitType_value = map[string]int32{
		"B":  0,
		"KB": 1,
		"MB": 2,
		"GB": 3,
		"TB": 4,
	}
)

func (x DataUnitType) Enum() *DataUnitType {
	p := new(DataUnitType)
	*p = x
	return p
}

func (x DataUnitType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataUnitType) Descriptor() protoreflect.EnumDescriptor {
	return file_plans_plans_proto_enumTypes[1].Descriptor()
}

func (DataUnitType) Type() protoreflect.EnumType {
	return &file_plans_plans_proto_enumTypes[1]
}

func (x DataUnitType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataUnitType.Descriptor instead.
func (DataUnitType) EnumDescriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{1}
}

type SpeedType int32

const (
	SpeedType_BytePerSecond     SpeedType = 0
	SpeedType_BitPerSecond      SpeedType = 1
	SpeedType_KiloBitPerSecond  SpeedType = 2
	SpeedType_KiloBytePerSecond SpeedType = 3
	SpeedType_MegaBitPerSecond  SpeedType = 4
	SpeedType_GigaBitPerSecond  SpeedType = 5
	SpeedType_MegaBytePerSecond SpeedType = 6
	SpeedType_GigaBytePerSecond SpeedType = 7
)

// Enum value maps for SpeedType.
var (
	SpeedType_name = map[int32]string{
		0: "BytePerSecond",
		1: "BitPerSecond",
		2: "KiloBitPerSecond",
		3: "KiloBytePerSecond",
		4: "MegaBitPerSecond",
		5: "GigaBitPerSecond",
		6: "MegaBytePerSecond",
		7: "GigaBytePerSecond",
	}
	SpeedType_value = map[string]int32{
		"BytePerSecond":     0,
		"BitPerSecond":      1,
		"KiloBitPerSecond":  2,
		"KiloBytePerSecond": 3,
		"MegaBitPerSecond":  4,
		"GigaBitPerSecond":  5,
		"MegaBytePerSecond": 6,
		"GigaBytePerSecond": 7,
	}
)

func (x SpeedType) Enum() *SpeedType {
	p := new(SpeedType)
	*p = x
	return p
}

func (x SpeedType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SpeedType) Descriptor() protoreflect.EnumDescriptor {
	return file_plans_plans_proto_enumTypes[2].Descriptor()
}

func (SpeedType) Type() protoreflect.EnumType {
	return &file_plans_plans_proto_enumTypes[2]
}

func (x SpeedType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SpeedType.Descriptor instead.
func (SpeedType) EnumDescriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{2}
}

type StateCode int32

const (
	StateCode_AndhraPradesh       StateCode = 0
	StateCode_ArunachalPradesh    StateCode = 1
	StateCode_Assam               StateCode = 2
	StateCode_Bihar               StateCode = 3
	StateCode_Chhattisgarh        StateCode = 4
	StateCode_Goa                 StateCode = 5
	StateCode_Gujarat             StateCode = 6
	StateCode_Haryana             StateCode = 7
	StateCode_HimachalPradesh     StateCode = 8
	StateCode_JammuAndKashmir     StateCode = 9
	StateCode_Jharkhand           StateCode = 10
	StateCode_Karnataka           StateCode = 11
	StateCode_Kerala              StateCode = 12
	StateCode_MadhyaPradesh       StateCode = 13
	StateCode_Maharashtra         StateCode = 14
	StateCode_Manipur             StateCode = 15
	StateCode_Meghalaya           StateCode = 16
	StateCode_Mizoram             StateCode = 17
	StateCode_Nagaland            StateCode = 18
	StateCode_Odisha              StateCode = 19
	StateCode_Punjab              StateCode = 20
	StateCode_Rajasthan           StateCode = 21
	StateCode_Sikkim              StateCode = 22
	StateCode_TamilNadu           StateCode = 23
	StateCode_Telangana           StateCode = 24
	StateCode_Tripura             StateCode = 25
	StateCode_UttarPradesh        StateCode = 26
	StateCode_Uttarakhand         StateCode = 27
	StateCode_WestBengal          StateCode = 28
	StateCode_AndamanAndNicobar   StateCode = 29
	StateCode_Chandigarh          StateCode = 30
	StateCode_DadraAndNagarHaveli StateCode = 31
	StateCode_DamanAndDiu         StateCode = 32
	StateCode_Lakshadweep         StateCode = 33
	StateCode_Delhi               StateCode = 34
	StateCode_Puducherry          StateCode = 35
)

// Enum value maps for StateCode.
var (
	StateCode_name = map[int32]string{
		0:  "AndhraPradesh",
		1:  "ArunachalPradesh",
		2:  "Assam",
		3:  "Bihar",
		4:  "Chhattisgarh",
		5:  "Goa",
		6:  "Gujarat",
		7:  "Haryana",
		8:  "HimachalPradesh",
		9:  "JammuAndKashmir",
		10: "Jharkhand",
		11: "Karnataka",
		12: "Kerala",
		13: "MadhyaPradesh",
		14: "Maharashtra",
		15: "Manipur",
		16: "Meghalaya",
		17: "Mizoram",
		18: "Nagaland",
		19: "Odisha",
		20: "Punjab",
		21: "Rajasthan",
		22: "Sikkim",
		23: "TamilNadu",
		24: "Telangana",
		25: "Tripura",
		26: "UttarPradesh",
		27: "Uttarakhand",
		28: "WestBengal",
		29: "AndamanAndNicobar",
		30: "Chandigarh",
		31: "DadraAndNagarHaveli",
		32: "DamanAndDiu",
		33: "Lakshadweep",
		34: "Delhi",
		35: "Puducherry",
	}
	StateCode_value = map[string]int32{
		"AndhraPradesh":       0,
		"ArunachalPradesh":    1,
		"Assam":               2,
		"Bihar":               3,
		"Chhattisgarh":        4,
		"Goa":                 5,
		"Gujarat":             6,
		"Haryana":             7,
		"HimachalPradesh":     8,
		"JammuAndKashmir":     9,
		"Jharkhand":           10,
		"Karnataka":           11,
		"Kerala":              12,
		"MadhyaPradesh":       13,
		"Maharashtra":         14,
		"Manipur":             15,
		"Meghalaya":           16,
		"Mizoram":             17,
		"Nagaland":            18,
		"Odisha":              19,
		"Punjab":              20,
		"Rajasthan":           21,
		"Sikkim":              22,
		"TamilNadu":           23,
		"Telangana":           24,
		"Tripura":             25,
		"UttarPradesh":        26,
		"Uttarakhand":         27,
		"WestBengal":          28,
		"AndamanAndNicobar":   29,
		"Chandigarh":          30,
		"DadraAndNagarHaveli": 31,
		"DamanAndDiu":         32,
		"Lakshadweep":         33,
		"Delhi":               34,
		"Puducherry":          35,
	}
)

func (x StateCode) Enum() *StateCode {
	p := new(StateCode)
	*p = x
	return p
}

func (x StateCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StateCode) Descriptor() protoreflect.EnumDescriptor {
	return file_plans_plans_proto_enumTypes[3].Descriptor()
}

func (StateCode) Type() protoreflect.EnumType {
	return &file_plans_plans_proto_enumTypes[3]
}

func (x StateCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StateCode.Descriptor instead.
func (StateCode) EnumDescriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{3}
}

type SavePlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateCode StateCode `protobuf:"varint,1,opt,name=stateCode,proto3,enum=StateCode" json:"stateCode,omitempty"`
	PlanType  PlanType  `protobuf:"varint,2,opt,name=planType,proto3,enum=PlanType" json:"planType,omitempty"`
	// Types that are assignable to PlanResponse:
	//	*SavePlanResponse_FupPlan
	//	*SavePlanResponse_SmePlan
	//	*SavePlanResponse_SmeFUPPlan
	//	*SavePlanResponse_UnlimitedPlan
	PlanResponse isSavePlanResponse_PlanResponse `protobuf_oneof:"PlanResponse"`
}

func (x *SavePlanResponse) Reset() {
	*x = SavePlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePlanResponse) ProtoMessage() {}

func (x *SavePlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePlanResponse.ProtoReflect.Descriptor instead.
func (*SavePlanResponse) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{0}
}

func (x *SavePlanResponse) GetStateCode() StateCode {
	if x != nil {
		return x.StateCode
	}
	return StateCode_AndhraPradesh
}

func (x *SavePlanResponse) GetPlanType() PlanType {
	if x != nil {
		return x.PlanType
	}
	return PlanType_Unlimited
}

func (m *SavePlanResponse) GetPlanResponse() isSavePlanResponse_PlanResponse {
	if m != nil {
		return m.PlanResponse
	}
	return nil
}

func (x *SavePlanResponse) GetFupPlan() *FupPlan {
	if x, ok := x.GetPlanResponse().(*SavePlanResponse_FupPlan); ok {
		return x.FupPlan
	}
	return nil
}

func (x *SavePlanResponse) GetSmePlan() *SMEPlan {
	if x, ok := x.GetPlanResponse().(*SavePlanResponse_SmePlan); ok {
		return x.SmePlan
	}
	return nil
}

func (x *SavePlanResponse) GetSmeFUPPlan() *SMEFUPPlan {
	if x, ok := x.GetPlanResponse().(*SavePlanResponse_SmeFUPPlan); ok {
		return x.SmeFUPPlan
	}
	return nil
}

func (x *SavePlanResponse) GetUnlimitedPlan() *UnlimitedPlan {
	if x, ok := x.GetPlanResponse().(*SavePlanResponse_UnlimitedPlan); ok {
		return x.UnlimitedPlan
	}
	return nil
}

type isSavePlanResponse_PlanResponse interface {
	isSavePlanResponse_PlanResponse()
}

type SavePlanResponse_FupPlan struct {
	FupPlan *FupPlan `protobuf:"bytes,3,opt,name=fupPlan,proto3,oneof"`
}

type SavePlanResponse_SmePlan struct {
	SmePlan *SMEPlan `protobuf:"bytes,4,opt,name=smePlan,proto3,oneof"`
}

type SavePlanResponse_SmeFUPPlan struct {
	SmeFUPPlan *SMEFUPPlan `protobuf:"bytes,5,opt,name=smeFUPPlan,proto3,oneof"`
}

type SavePlanResponse_UnlimitedPlan struct {
	UnlimitedPlan *UnlimitedPlan `protobuf:"bytes,6,opt,name=unlimitedPlan,proto3,oneof"`
}

func (*SavePlanResponse_FupPlan) isSavePlanResponse_PlanResponse() {}

func (*SavePlanResponse_SmePlan) isSavePlanResponse_PlanResponse() {}

func (*SavePlanResponse_SmeFUPPlan) isSavePlanResponse_PlanResponse() {}

func (*SavePlanResponse_UnlimitedPlan) isSavePlanResponse_PlanResponse() {}

type SavePlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateCode StateCode `protobuf:"varint,1,opt,name=stateCode,proto3,enum=StateCode" json:"stateCode,omitempty"`
	PlanType  PlanType  `protobuf:"varint,2,opt,name=planType,proto3,enum=PlanType" json:"planType,omitempty"`
	// Types that are assignable to PlanRequest:
	//	*SavePlanRequest_FupPlan
	//	*SavePlanRequest_SmePlan
	//	*SavePlanRequest_SmeFUPPlan
	//	*SavePlanRequest_UnlimitedPlan
	PlanRequest isSavePlanRequest_PlanRequest `protobuf_oneof:"PlanRequest"`
}

func (x *SavePlanRequest) Reset() {
	*x = SavePlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SavePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SavePlanRequest) ProtoMessage() {}

func (x *SavePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SavePlanRequest.ProtoReflect.Descriptor instead.
func (*SavePlanRequest) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{1}
}

func (x *SavePlanRequest) GetStateCode() StateCode {
	if x != nil {
		return x.StateCode
	}
	return StateCode_AndhraPradesh
}

func (x *SavePlanRequest) GetPlanType() PlanType {
	if x != nil {
		return x.PlanType
	}
	return PlanType_Unlimited
}

func (m *SavePlanRequest) GetPlanRequest() isSavePlanRequest_PlanRequest {
	if m != nil {
		return m.PlanRequest
	}
	return nil
}

func (x *SavePlanRequest) GetFupPlan() *FupPlan {
	if x, ok := x.GetPlanRequest().(*SavePlanRequest_FupPlan); ok {
		return x.FupPlan
	}
	return nil
}

func (x *SavePlanRequest) GetSmePlan() *SMEPlan {
	if x, ok := x.GetPlanRequest().(*SavePlanRequest_SmePlan); ok {
		return x.SmePlan
	}
	return nil
}

func (x *SavePlanRequest) GetSmeFUPPlan() *SMEFUPPlan {
	if x, ok := x.GetPlanRequest().(*SavePlanRequest_SmeFUPPlan); ok {
		return x.SmeFUPPlan
	}
	return nil
}

func (x *SavePlanRequest) GetUnlimitedPlan() *UnlimitedPlan {
	if x, ok := x.GetPlanRequest().(*SavePlanRequest_UnlimitedPlan); ok {
		return x.UnlimitedPlan
	}
	return nil
}

type isSavePlanRequest_PlanRequest interface {
	isSavePlanRequest_PlanRequest()
}

type SavePlanRequest_FupPlan struct {
	FupPlan *FupPlan `protobuf:"bytes,3,opt,name=fupPlan,proto3,oneof"`
}

type SavePlanRequest_SmePlan struct {
	SmePlan *SMEPlan `protobuf:"bytes,4,opt,name=smePlan,proto3,oneof"`
}

type SavePlanRequest_SmeFUPPlan struct {
	SmeFUPPlan *SMEFUPPlan `protobuf:"bytes,5,opt,name=smeFUPPlan,proto3,oneof"`
}

type SavePlanRequest_UnlimitedPlan struct {
	UnlimitedPlan *UnlimitedPlan `protobuf:"bytes,6,opt,name=unlimitedPlan,proto3,oneof"`
}

func (*SavePlanRequest_FupPlan) isSavePlanRequest_PlanRequest() {}

func (*SavePlanRequest_SmePlan) isSavePlanRequest_PlanRequest() {}

func (*SavePlanRequest_SmeFUPPlan) isSavePlanRequest_PlanRequest() {}

func (*SavePlanRequest_UnlimitedPlan) isSavePlanRequest_PlanRequest() {}

type FupPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortSpeed     *PortSpeedType `protobuf:"bytes,1,opt,name=portSpeed,proto3" json:"portSpeed,omitempty"`
	PlanRentalINR int32          `protobuf:"varint,2,opt,name=planRentalINR,proto3" json:"planRentalINR,omitempty"`
	DataUsage     *DataUsageType `protobuf:"bytes,3,opt,name=dataUsage,proto3" json:"dataUsage,omitempty"`
	AfterFUP      *PortSpeedType `protobuf:"bytes,4,opt,name=afterFUP,proto3" json:"afterFUP,omitempty"`
}

func (x *FupPlan) Reset() {
	*x = FupPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FupPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FupPlan) ProtoMessage() {}

func (x *FupPlan) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FupPlan.ProtoReflect.Descriptor instead.
func (*FupPlan) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{2}
}

func (x *FupPlan) GetPortSpeed() *PortSpeedType {
	if x != nil {
		return x.PortSpeed
	}
	return nil
}

func (x *FupPlan) GetPlanRentalINR() int32 {
	if x != nil {
		return x.PlanRentalINR
	}
	return 0
}

func (x *FupPlan) GetDataUsage() *DataUsageType {
	if x != nil {
		return x.DataUsage
	}
	return nil
}

func (x *FupPlan) GetAfterFUP() *PortSpeedType {
	if x != nil {
		return x.AfterFUP
	}
	return nil
}

type SMEPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortSpeed     *PortSpeedType `protobuf:"bytes,1,opt,name=portSpeed,proto3" json:"portSpeed,omitempty"`
	PlanRentalINR int32          `protobuf:"varint,2,opt,name=planRentalINR,proto3" json:"planRentalINR,omitempty"`
	AfterFUP      *PortSpeedType `protobuf:"bytes,4,opt,name=afterFUP,proto3" json:"afterFUP,omitempty"`
}

func (x *SMEPlan) Reset() {
	*x = SMEPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMEPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMEPlan) ProtoMessage() {}

func (x *SMEPlan) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMEPlan.ProtoReflect.Descriptor instead.
func (*SMEPlan) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{3}
}

func (x *SMEPlan) GetPortSpeed() *PortSpeedType {
	if x != nil {
		return x.PortSpeed
	}
	return nil
}

func (x *SMEPlan) GetPlanRentalINR() int32 {
	if x != nil {
		return x.PlanRentalINR
	}
	return 0
}

func (x *SMEPlan) GetAfterFUP() *PortSpeedType {
	if x != nil {
		return x.AfterFUP
	}
	return nil
}

type SMEFUPPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortSpeed     *PortSpeedType `protobuf:"bytes,1,opt,name=portSpeed,proto3" json:"portSpeed,omitempty"`
	PlanRentalINR int32          `protobuf:"varint,2,opt,name=planRentalINR,proto3" json:"planRentalINR,omitempty"`
	DataUsage     *DataUsageType `protobuf:"bytes,3,opt,name=dataUsage,proto3" json:"dataUsage,omitempty"`
	AfterFUP      *PortSpeedType `protobuf:"bytes,4,opt,name=afterFUP,proto3" json:"afterFUP,omitempty"`
}

func (x *SMEFUPPlan) Reset() {
	*x = SMEFUPPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMEFUPPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMEFUPPlan) ProtoMessage() {}

func (x *SMEFUPPlan) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMEFUPPlan.ProtoReflect.Descriptor instead.
func (*SMEFUPPlan) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{4}
}

func (x *SMEFUPPlan) GetPortSpeed() *PortSpeedType {
	if x != nil {
		return x.PortSpeed
	}
	return nil
}

func (x *SMEFUPPlan) GetPlanRentalINR() int32 {
	if x != nil {
		return x.PlanRentalINR
	}
	return 0
}

func (x *SMEFUPPlan) GetDataUsage() *DataUsageType {
	if x != nil {
		return x.DataUsage
	}
	return nil
}

func (x *SMEFUPPlan) GetAfterFUP() *PortSpeedType {
	if x != nil {
		return x.AfterFUP
	}
	return nil
}

type UnlimitedPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortSpeed     *PortSpeedType `protobuf:"bytes,1,opt,name=portSpeed,proto3" json:"portSpeed,omitempty"`
	PlanRentalINR int32          `protobuf:"varint,2,opt,name=planRentalINR,proto3" json:"planRentalINR,omitempty"`
	AfterFUP      *PortSpeedType `protobuf:"bytes,4,opt,name=afterFUP,proto3" json:"afterFUP,omitempty"`
}

func (x *UnlimitedPlan) Reset() {
	*x = UnlimitedPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlimitedPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlimitedPlan) ProtoMessage() {}

func (x *UnlimitedPlan) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlimitedPlan.ProtoReflect.Descriptor instead.
func (*UnlimitedPlan) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{5}
}

func (x *UnlimitedPlan) GetPortSpeed() *PortSpeedType {
	if x != nil {
		return x.PortSpeed
	}
	return nil
}

func (x *UnlimitedPlan) GetPlanRentalINR() int32 {
	if x != nil {
		return x.PlanRentalINR
	}
	return 0
}

func (x *UnlimitedPlan) GetAfterFUP() *PortSpeedType {
	if x != nil {
		return x.AfterFUP
	}
	return nil
}

type GetPlanRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StateCode StateCode `protobuf:"varint,1,opt,name=stateCode,proto3,enum=StateCode" json:"stateCode,omitempty"`
	PlanType  PlanType  `protobuf:"varint,2,opt,name=planType,proto3,enum=PlanType" json:"planType,omitempty"`
}

func (x *GetPlanRequest) Reset() {
	*x = GetPlanRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRequest) ProtoMessage() {}

func (x *GetPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRequest) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{6}
}

func (x *GetPlanRequest) GetStateCode() StateCode {
	if x != nil {
		return x.StateCode
	}
	return StateCode_AndhraPradesh
}

func (x *GetPlanRequest) GetPlanType() PlanType {
	if x != nil {
		return x.PlanType
	}
	return PlanType_Unlimited
}

type GetPlansResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Plans:
	//	*GetPlansResponse_FupPlans
	//	*GetPlansResponse_SmePlans
	//	*GetPlansResponse_SmeFUPPlans
	//	*GetPlansResponse_UnlimitedPlans
	Plans isGetPlansResponse_Plans `protobuf_oneof:"Plans"`
}

func (x *GetPlansResponse) Reset() {
	*x = GetPlansResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlansResponse) ProtoMessage() {}

func (x *GetPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlansResponse.ProtoReflect.Descriptor instead.
func (*GetPlansResponse) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{7}
}

func (m *GetPlansResponse) GetPlans() isGetPlansResponse_Plans {
	if m != nil {
		return m.Plans
	}
	return nil
}

func (x *GetPlansResponse) GetFupPlans() *FUPPlans {
	if x, ok := x.GetPlans().(*GetPlansResponse_FupPlans); ok {
		return x.FupPlans
	}
	return nil
}

func (x *GetPlansResponse) GetSmePlans() *SMEPlans {
	if x, ok := x.GetPlans().(*GetPlansResponse_SmePlans); ok {
		return x.SmePlans
	}
	return nil
}

func (x *GetPlansResponse) GetSmeFUPPlans() *SMEFUPPlans {
	if x, ok := x.GetPlans().(*GetPlansResponse_SmeFUPPlans); ok {
		return x.SmeFUPPlans
	}
	return nil
}

func (x *GetPlansResponse) GetUnlimitedPlans() *UnlimitedPlans {
	if x, ok := x.GetPlans().(*GetPlansResponse_UnlimitedPlans); ok {
		return x.UnlimitedPlans
	}
	return nil
}

type isGetPlansResponse_Plans interface {
	isGetPlansResponse_Plans()
}

type GetPlansResponse_FupPlans struct {
	FupPlans *FUPPlans `protobuf:"bytes,1,opt,name=fupPlans,proto3,oneof"`
}

type GetPlansResponse_SmePlans struct {
	SmePlans *SMEPlans `protobuf:"bytes,4,opt,name=smePlans,proto3,oneof"`
}

type GetPlansResponse_SmeFUPPlans struct {
	SmeFUPPlans *SMEFUPPlans `protobuf:"bytes,5,opt,name=smeFUPPlans,proto3,oneof"`
}

type GetPlansResponse_UnlimitedPlans struct {
	UnlimitedPlans *UnlimitedPlans `protobuf:"bytes,6,opt,name=unlimitedPlans,proto3,oneof"`
}

func (*GetPlansResponse_FupPlans) isGetPlansResponse_Plans() {}

func (*GetPlansResponse_SmePlans) isGetPlansResponse_Plans() {}

func (*GetPlansResponse_SmeFUPPlans) isGetPlansResponse_Plans() {}

func (*GetPlansResponse_UnlimitedPlans) isGetPlansResponse_Plans() {}

type FUPPlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FupPlans []*FupPlan `protobuf:"bytes,1,rep,name=fupPlans,proto3" json:"fupPlans,omitempty"`
}

func (x *FUPPlans) Reset() {
	*x = FUPPlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FUPPlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FUPPlans) ProtoMessage() {}

func (x *FUPPlans) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FUPPlans.ProtoReflect.Descriptor instead.
func (*FUPPlans) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{8}
}

func (x *FUPPlans) GetFupPlans() []*FupPlan {
	if x != nil {
		return x.FupPlans
	}
	return nil
}

type SMEPlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmePlans []*SMEPlan `protobuf:"bytes,1,rep,name=smePlans,proto3" json:"smePlans,omitempty"`
}

func (x *SMEPlans) Reset() {
	*x = SMEPlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMEPlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMEPlans) ProtoMessage() {}

func (x *SMEPlans) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMEPlans.ProtoReflect.Descriptor instead.
func (*SMEPlans) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{9}
}

func (x *SMEPlans) GetSmePlans() []*SMEPlan {
	if x != nil {
		return x.SmePlans
	}
	return nil
}

type SMEFUPPlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SmeFupPlans []*SMEFUPPlan `protobuf:"bytes,1,rep,name=smeFupPlans,proto3" json:"smeFupPlans,omitempty"`
}

func (x *SMEFUPPlans) Reset() {
	*x = SMEFUPPlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMEFUPPlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMEFUPPlans) ProtoMessage() {}

func (x *SMEFUPPlans) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMEFUPPlans.ProtoReflect.Descriptor instead.
func (*SMEFUPPlans) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{10}
}

func (x *SMEFUPPlans) GetSmeFupPlans() []*SMEFUPPlan {
	if x != nil {
		return x.SmeFupPlans
	}
	return nil
}

type UnlimitedPlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnlimitedPlans []*UnlimitedPlan `protobuf:"bytes,1,rep,name=unlimitedPlans,proto3" json:"unlimitedPlans,omitempty"`
}

func (x *UnlimitedPlans) Reset() {
	*x = UnlimitedPlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnlimitedPlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnlimitedPlans) ProtoMessage() {}

func (x *UnlimitedPlans) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnlimitedPlans.ProtoReflect.Descriptor instead.
func (*UnlimitedPlans) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{11}
}

func (x *UnlimitedPlans) GetUnlimitedPlans() []*UnlimitedPlan {
	if x != nil {
		return x.UnlimitedPlans
	}
	return nil
}

type FUPPlanResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortSpeed     *PortSpeedType `protobuf:"bytes,1,opt,name=portSpeed,proto3" json:"portSpeed,omitempty"`
	PlanRentalINR int32          `protobuf:"varint,2,opt,name=planRentalINR,proto3" json:"planRentalINR,omitempty"`
	DataUsage     *DataUsageType `protobuf:"bytes,3,opt,name=dataUsage,proto3" json:"dataUsage,omitempty"`
	AfterFUP      *PortSpeedType `protobuf:"bytes,4,opt,name=afterFUP,proto3" json:"afterFUP,omitempty"`
}

func (x *FUPPlanResponse) Reset() {
	*x = FUPPlanResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FUPPlanResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FUPPlanResponse) ProtoMessage() {}

func (x *FUPPlanResponse) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FUPPlanResponse.ProtoReflect.Descriptor instead.
func (*FUPPlanResponse) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{12}
}

func (x *FUPPlanResponse) GetPortSpeed() *PortSpeedType {
	if x != nil {
		return x.PortSpeed
	}
	return nil
}

func (x *FUPPlanResponse) GetPlanRentalINR() int32 {
	if x != nil {
		return x.PlanRentalINR
	}
	return 0
}

func (x *FUPPlanResponse) GetDataUsage() *DataUsageType {
	if x != nil {
		return x.DataUsage
	}
	return nil
}

func (x *FUPPlanResponse) GetAfterFUP() *PortSpeedType {
	if x != nil {
		return x.AfterFUP
	}
	return nil
}

type PortSpeedType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Speed        int32     `protobuf:"varint,1,opt,name=speed,proto3" json:"speed,omitempty"`
	DataUnitType SpeedType `protobuf:"varint,2,opt,name=dataUnitType,proto3,enum=SpeedType" json:"dataUnitType,omitempty"`
}

func (x *PortSpeedType) Reset() {
	*x = PortSpeedType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortSpeedType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortSpeedType) ProtoMessage() {}

func (x *PortSpeedType) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortSpeedType.ProtoReflect.Descriptor instead.
func (*PortSpeedType) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{13}
}

func (x *PortSpeedType) GetSpeed() int32 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *PortSpeedType) GetDataUnitType() SpeedType {
	if x != nil {
		return x.DataUnitType
	}
	return SpeedType_BytePerSecond
}

type DataUsageType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataAmount   int32        `protobuf:"varint,1,opt,name=dataAmount,proto3" json:"dataAmount,omitempty"`
	DataUnitType DataUnitType `protobuf:"varint,2,opt,name=dataUnitType,proto3,enum=DataUnitType" json:"dataUnitType,omitempty"`
}

func (x *DataUsageType) Reset() {
	*x = DataUsageType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plans_plans_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataUsageType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataUsageType) ProtoMessage() {}

func (x *DataUsageType) ProtoReflect() protoreflect.Message {
	mi := &file_plans_plans_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataUsageType.ProtoReflect.Descriptor instead.
func (*DataUsageType) Descriptor() ([]byte, []int) {
	return file_plans_plans_proto_rawDescGZIP(), []int{14}
}

func (x *DataUsageType) GetDataAmount() int32 {
	if x != nil {
		return x.DataAmount
	}
	return 0
}

func (x *DataUsageType) GetDataUnitType() DataUnitType {
	if x != nil {
		return x.DataUnitType
	}
	return DataUnitType_B
}

var File_plans_plans_proto protoreflect.FileDescriptor

var file_plans_plans_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x07, 0x66, 0x75, 0x70,
	0x50, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x75, 0x70,
	0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x66, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x24, 0x0a, 0x07, 0x73, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x08, 0x2e, 0x53, 0x4d, 0x45, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6d,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2d, 0x0a, 0x0a, 0x73, 0x6d, 0x65, 0x46, 0x55, 0x50, 0x50,
	0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x4d, 0x45, 0x46,
	0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x73, 0x6d, 0x65, 0x46, 0x55, 0x50,
	0x50, 0x6c, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x0d, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x6e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x75,
	0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa4, 0x02, 0x0a,
	0x0f, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x28, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50,
	0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x07, 0x66, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x07,
	0x66, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x24, 0x0a, 0x07, 0x73, 0x6d, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x4d, 0x45, 0x50, 0x6c,
	0x61, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x73, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2d, 0x0a,
	0x0a, 0x73, 0x6d, 0x65, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x4d, 0x45, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x73, 0x6d, 0x65, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x0d,
	0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0xb7, 0x01, 0x0a, 0x07, 0x46, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x12,
	0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x49, 0x4e, 0x52, 0x12, 0x2c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x22, 0x89, 0x01,
	0x0a, 0x07, 0x53, 0x4d, 0x45, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x52,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x12, 0x2a, 0x0a,
	0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x61, 0x66, 0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x22, 0xba, 0x01, 0x0a, 0x0a, 0x53, 0x4d,
	0x45, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x12, 0x2c, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x22, 0x8f, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x12, 0x2a, 0x0a, 0x08,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x22, 0x61, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x22, 0xda, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x27, 0x0a, 0x08, 0x66, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x66, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x6d, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x53, 0x4d,
	0x45, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x08, 0x73, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x12, 0x30, 0x0a, 0x0b, 0x73, 0x6d, 0x65, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x53, 0x4d, 0x45, 0x46, 0x55, 0x50,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6d, 0x65, 0x46, 0x55, 0x50, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x55,
	0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x48, 0x00, 0x52,
	0x0e, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x42,
	0x07, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x08, 0x46, 0x55, 0x50, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x08, 0x66, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x30, 0x0a, 0x08, 0x53, 0x4d,
	0x45, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x08, 0x73, 0x6d, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x53, 0x4d, 0x45, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x08, 0x73, 0x6d, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x3c, 0x0a, 0x0b,
	0x53, 0x4d, 0x45, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x73,
	0x6d, 0x65, 0x46, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x53, 0x4d, 0x45, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0b, 0x73,
	0x6d, 0x65, 0x46, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x22, 0x48, 0x0a, 0x0e, 0x55, 0x6e,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0e,
	0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0e, 0x75, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x22, 0xbf, 0x01, 0x0a, 0x0f, 0x46, 0x55, 0x50, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x70, 0x6f, 0x72, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x72,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x70, 0x6c, 0x61, 0x6e, 0x52, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x70,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x49, 0x4e, 0x52, 0x12, 0x2c, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x46, 0x55, 0x50, 0x22, 0x55, 0x0a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x70, 0x65, 0x65, 0x64, 0x12, 0x2e, 0x0a,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0c, 0x64, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x62, 0x0a,
	0x0d, 0x44, 0x61, 0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31,
	0x0a, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x2a, 0x4f, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a,
	0x09, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03,
	0x46, 0x55, 0x50, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x45, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x4d, 0x45, 0x5f, 0x46, 0x55, 0x50, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x6f, 0x70, 0x55, 0x70, 0x44, 0x61, 0x74, 0x61, 0x42, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x10, 0x04, 0x2a, 0x35, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x05, 0x0a, 0x01, 0x42, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x4b, 0x42, 0x10,
	0x01, 0x12, 0x06, 0x0a, 0x02, 0x4d, 0x42, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x47, 0x42, 0x10,
	0x03, 0x12, 0x06, 0x0a, 0x02, 0x54, 0x42, 0x10, 0x04, 0x2a, 0xb7, 0x01, 0x0a, 0x09, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x79, 0x74, 0x65, 0x50,
	0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x69,
	0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x4b, 0x69, 0x6c, 0x6f, 0x42, 0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x69, 0x6c, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x65, 0x67,
	0x61, 0x42, 0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x04, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x69, 0x67, 0x61, 0x42, 0x69, 0x74, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x65, 0x67, 0x61, 0x42, 0x79, 0x74,
	0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x69, 0x67, 0x61, 0x42, 0x79, 0x74, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x10, 0x07, 0x2a, 0xbc, 0x04, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x6e, 0x64, 0x68, 0x72, 0x61, 0x50, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x68, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x72, 0x75, 0x6e, 0x61, 0x63, 0x68, 0x61,
	0x6c, 0x50, 0x72, 0x61, 0x64, 0x65, 0x73, 0x68, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x73,
	0x73, 0x61, 0x6d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x69, 0x68, 0x61, 0x72, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x68, 0x68, 0x61, 0x74, 0x74, 0x69, 0x73, 0x67, 0x61, 0x72, 0x68,
	0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x6f, 0x61, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x47,
	0x75, 0x6a, 0x61, 0x72, 0x61, 0x74, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x61, 0x72, 0x79,
	0x61, 0x6e, 0x61, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x69, 0x6d, 0x61, 0x63, 0x68, 0x61,
	0x6c, 0x50, 0x72, 0x61, 0x64, 0x65, 0x73, 0x68, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4a, 0x61,
	0x6d, 0x6d, 0x75, 0x41, 0x6e, 0x64, 0x4b, 0x61, 0x73, 0x68, 0x6d, 0x69, 0x72, 0x10, 0x09, 0x12,
	0x0d, 0x0a, 0x09, 0x4a, 0x68, 0x61, 0x72, 0x6b, 0x68, 0x61, 0x6e, 0x64, 0x10, 0x0a, 0x12, 0x0d,
	0x0a, 0x09, 0x4b, 0x61, 0x72, 0x6e, 0x61, 0x74, 0x61, 0x6b, 0x61, 0x10, 0x0b, 0x12, 0x0a, 0x0a,
	0x06, 0x4b, 0x65, 0x72, 0x61, 0x6c, 0x61, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x61, 0x64,
	0x68, 0x79, 0x61, 0x50, 0x72, 0x61, 0x64, 0x65, 0x73, 0x68, 0x10, 0x0d, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x61, 0x68, 0x61, 0x72, 0x61, 0x73, 0x68, 0x74, 0x72, 0x61, 0x10, 0x0e, 0x12, 0x0b, 0x0a,
	0x07, 0x4d, 0x61, 0x6e, 0x69, 0x70, 0x75, 0x72, 0x10, 0x0f, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x65,
	0x67, 0x68, 0x61, 0x6c, 0x61, 0x79, 0x61, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x69, 0x7a,
	0x6f, 0x72, 0x61, 0x6d, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x61, 0x67, 0x61, 0x6c, 0x61,
	0x6e, 0x64, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x64, 0x69, 0x73, 0x68, 0x61, 0x10, 0x13,
	0x12, 0x0a, 0x0a, 0x06, 0x50, 0x75, 0x6e, 0x6a, 0x61, 0x62, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09,
	0x52, 0x61, 0x6a, 0x61, 0x73, 0x74, 0x68, 0x61, 0x6e, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x69, 0x6b, 0x6b, 0x69, 0x6d, 0x10, 0x16, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x61, 0x6d, 0x69, 0x6c,
	0x4e, 0x61, 0x64, 0x75, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x65, 0x6c, 0x61, 0x6e, 0x67,
	0x61, 0x6e, 0x61, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x72, 0x69, 0x70, 0x75, 0x72, 0x61,
	0x10, 0x19, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x74, 0x74, 0x61, 0x72, 0x50, 0x72, 0x61, 0x64, 0x65,
	0x73, 0x68, 0x10, 0x1a, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x74, 0x74, 0x61, 0x72, 0x61, 0x6b, 0x68,
	0x61, 0x6e, 0x64, 0x10, 0x1b, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x65, 0x73, 0x74, 0x42, 0x65, 0x6e,
	0x67, 0x61, 0x6c, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x6e, 0x64, 0x61, 0x6d, 0x61, 0x6e,
	0x41, 0x6e, 0x64, 0x4e, 0x69, 0x63, 0x6f, 0x62, 0x61, 0x72, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x68, 0x61, 0x6e, 0x64, 0x69, 0x67, 0x61, 0x72, 0x68, 0x10, 0x1e, 0x12, 0x17, 0x0a, 0x13,
	0x44, 0x61, 0x64, 0x72, 0x61, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x67, 0x61, 0x72, 0x48, 0x61, 0x76,
	0x65, 0x6c, 0x69, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x61, 0x6d, 0x61, 0x6e, 0x41, 0x6e,
	0x64, 0x44, 0x69, 0x75, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x61, 0x6b, 0x73, 0x68, 0x61,
	0x64, 0x77, 0x65, 0x65, 0x70, 0x10, 0x21, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x65, 0x6c, 0x68, 0x69,
	0x10, 0x22, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x75, 0x64, 0x75, 0x63, 0x68, 0x65, 0x72, 0x72, 0x79,
	0x10, 0x23, 0x32, 0x67, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0f, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x61,
	0x76, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x10, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50, 0x6c, 0x61,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x53, 0x61, 0x76, 0x65, 0x50,
	0x6c, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2c, 0x5a, 0x2a, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6a, 0x65, 0x73, 0x73, 0x61, 0x6c,
	0x76, 0x61, 0x2f, 0x67, 0x6f, 0x2d, 0x72, 0x61, 0x69, 0x6c, 0x77, 0x69, 0x72, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x3b, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_plans_plans_proto_rawDescOnce sync.Once
	file_plans_plans_proto_rawDescData = file_plans_plans_proto_rawDesc
)

func file_plans_plans_proto_rawDescGZIP() []byte {
	file_plans_plans_proto_rawDescOnce.Do(func() {
		file_plans_plans_proto_rawDescData = protoimpl.X.CompressGZIP(file_plans_plans_proto_rawDescData)
	})
	return file_plans_plans_proto_rawDescData
}

var file_plans_plans_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_plans_plans_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_plans_plans_proto_goTypes = []interface{}{
	(PlanType)(0),            // 0: PlanType
	(DataUnitType)(0),        // 1: DataUnitType
	(SpeedType)(0),           // 2: SpeedType
	(StateCode)(0),           // 3: StateCode
	(*SavePlanResponse)(nil), // 4: SavePlanResponse
	(*SavePlanRequest)(nil),  // 5: SavePlanRequest
	(*FupPlan)(nil),          // 6: FupPlan
	(*SMEPlan)(nil),          // 7: SMEPlan
	(*SMEFUPPlan)(nil),       // 8: SMEFUPPlan
	(*UnlimitedPlan)(nil),    // 9: UnlimitedPlan
	(*GetPlanRequest)(nil),   // 10: GetPlanRequest
	(*GetPlansResponse)(nil), // 11: GetPlansResponse
	(*FUPPlans)(nil),         // 12: FUPPlans
	(*SMEPlans)(nil),         // 13: SMEPlans
	(*SMEFUPPlans)(nil),      // 14: SMEFUPPlans
	(*UnlimitedPlans)(nil),   // 15: UnlimitedPlans
	(*FUPPlanResponse)(nil),  // 16: FUPPlanResponse
	(*PortSpeedType)(nil),    // 17: PortSpeedType
	(*DataUsageType)(nil),    // 18: DataUsageType
}
var file_plans_plans_proto_depIdxs = []int32{
	3,  // 0: SavePlanResponse.stateCode:type_name -> StateCode
	0,  // 1: SavePlanResponse.planType:type_name -> PlanType
	6,  // 2: SavePlanResponse.fupPlan:type_name -> FupPlan
	7,  // 3: SavePlanResponse.smePlan:type_name -> SMEPlan
	8,  // 4: SavePlanResponse.smeFUPPlan:type_name -> SMEFUPPlan
	9,  // 5: SavePlanResponse.unlimitedPlan:type_name -> UnlimitedPlan
	3,  // 6: SavePlanRequest.stateCode:type_name -> StateCode
	0,  // 7: SavePlanRequest.planType:type_name -> PlanType
	6,  // 8: SavePlanRequest.fupPlan:type_name -> FupPlan
	7,  // 9: SavePlanRequest.smePlan:type_name -> SMEPlan
	8,  // 10: SavePlanRequest.smeFUPPlan:type_name -> SMEFUPPlan
	9,  // 11: SavePlanRequest.unlimitedPlan:type_name -> UnlimitedPlan
	17, // 12: FupPlan.portSpeed:type_name -> PortSpeedType
	18, // 13: FupPlan.dataUsage:type_name -> DataUsageType
	17, // 14: FupPlan.afterFUP:type_name -> PortSpeedType
	17, // 15: SMEPlan.portSpeed:type_name -> PortSpeedType
	17, // 16: SMEPlan.afterFUP:type_name -> PortSpeedType
	17, // 17: SMEFUPPlan.portSpeed:type_name -> PortSpeedType
	18, // 18: SMEFUPPlan.dataUsage:type_name -> DataUsageType
	17, // 19: SMEFUPPlan.afterFUP:type_name -> PortSpeedType
	17, // 20: UnlimitedPlan.portSpeed:type_name -> PortSpeedType
	17, // 21: UnlimitedPlan.afterFUP:type_name -> PortSpeedType
	3,  // 22: GetPlanRequest.stateCode:type_name -> StateCode
	0,  // 23: GetPlanRequest.planType:type_name -> PlanType
	12, // 24: GetPlansResponse.fupPlans:type_name -> FUPPlans
	13, // 25: GetPlansResponse.smePlans:type_name -> SMEPlans
	14, // 26: GetPlansResponse.smeFUPPlans:type_name -> SMEFUPPlans
	15, // 27: GetPlansResponse.unlimitedPlans:type_name -> UnlimitedPlans
	6,  // 28: FUPPlans.fupPlans:type_name -> FupPlan
	7,  // 29: SMEPlans.smePlans:type_name -> SMEPlan
	8,  // 30: SMEFUPPlans.smeFupPlans:type_name -> SMEFUPPlan
	9,  // 31: UnlimitedPlans.unlimitedPlans:type_name -> UnlimitedPlan
	17, // 32: FUPPlanResponse.portSpeed:type_name -> PortSpeedType
	18, // 33: FUPPlanResponse.dataUsage:type_name -> DataUsageType
	17, // 34: FUPPlanResponse.afterFUP:type_name -> PortSpeedType
	2,  // 35: PortSpeedType.dataUnitType:type_name -> SpeedType
	1,  // 36: DataUsageType.dataUnitType:type_name -> DataUnitType
	10, // 37: Plans.GetPlan:input_type -> GetPlanRequest
	5,  // 38: Plans.SavePlan:input_type -> SavePlanRequest
	11, // 39: Plans.GetPlan:output_type -> GetPlansResponse
	4,  // 40: Plans.SavePlan:output_type -> SavePlanResponse
	39, // [39:41] is the sub-list for method output_type
	37, // [37:39] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_plans_plans_proto_init() }
func file_plans_plans_proto_init() {
	if File_plans_plans_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_plans_plans_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SavePlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FupPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMEPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMEFUPPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlimitedPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlanRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPlansResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FUPPlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMEPlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMEFUPPlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnlimitedPlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FUPPlanResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortSpeedType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plans_plans_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataUsageType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plans_plans_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*SavePlanResponse_FupPlan)(nil),
		(*SavePlanResponse_SmePlan)(nil),
		(*SavePlanResponse_SmeFUPPlan)(nil),
		(*SavePlanResponse_UnlimitedPlan)(nil),
	}
	file_plans_plans_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*SavePlanRequest_FupPlan)(nil),
		(*SavePlanRequest_SmePlan)(nil),
		(*SavePlanRequest_SmeFUPPlan)(nil),
		(*SavePlanRequest_UnlimitedPlan)(nil),
	}
	file_plans_plans_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*GetPlansResponse_FupPlans)(nil),
		(*GetPlansResponse_SmePlans)(nil),
		(*GetPlansResponse_SmeFUPPlans)(nil),
		(*GetPlansResponse_UnlimitedPlans)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plans_plans_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_plans_plans_proto_goTypes,
		DependencyIndexes: file_plans_plans_proto_depIdxs,
		EnumInfos:         file_plans_plans_proto_enumTypes,
		MessageInfos:      file_plans_plans_proto_msgTypes,
	}.Build()
	File_plans_plans_proto = out.File
	file_plans_plans_proto_rawDesc = nil
	file_plans_plans_proto_goTypes = nil
	file_plans_plans_proto_depIdxs = nil
}
