syntax = "proto3";

option go_package = "github.com/jessalva/go-railwire/api/;plans";

service Plans{

  rpc GetPlan( Plan ) returns (PlanResponse);
  rpc SavePlan( SavePlanRequest ) returns (SavePlanResponse);

}

message SavePlanResponse{

  string planType = 1;
  oneof PlanRequest{

    FupPlanRequest fupPlanRequest = 2;
    SMEPlan smePlan = 3;
    SMEFUPPlan smeFUPPlan = 4;
    UnlimitedPlan unlimitedPlan = 5;

  }
  string id = 6;

}

message SavePlanRequest{

  string planType = 1;
  oneof PlanRequest{

      FupPlanRequest fupPlanRequest = 2;
      SMEPlan smePlan = 3;
      SMEFUPPlan smeFUPPlan = 4;
      UnlimitedPlan unlimitedPlan = 5;

  }


}

message FupPlanRequest{

  PortSpeedType portSpeed = 1;
  int32 planRentalINR = 2;
  DataUsageType dataUsage = 3;
  PortSpeedType afterFUP = 4;

}

message SMEPlan{

  PortSpeedType portSpeed = 1;
  int32 planRentalINR = 2;
  PortSpeedType afterFUP = 4;

}

message SMEFUPPlan{

  PortSpeedType portSpeed = 1;
  int32 planRentalINR = 2;
  DataUsageType dataUsage = 3;
  PortSpeedType afterFUP = 4;

}

message UnlimitedPlan{

  PortSpeedType portSpeed = 1;
  int32 planRentalINR = 2;
  PortSpeedType afterFUP = 4;

}

message Plan{

  string stateCode = 1;

}

message PlanResponse{

  repeated FUPPlanResponse fupPlans = 1;


}

message FUPPlanResponse{
  PortSpeedType portSpeed = 1;
  int32 planRentalINR = 2;
  DataUsageType dataUsage = 3;
  PortSpeedType afterFUP = 4;
}

message PortSpeedType{

  int32 speed = 1;
  SpeedType dataUnitType = 2;

}

message DataUsageType{

  int32 dataAmount = 1;
  DataUnitType dataUnitType = 2;

}

enum DataUnitType{

  B=0;
  KB=1;
  MB=2;
  GB=3;
  TB=4;

}

enum SpeedType{

  BytePerSecond=0;
  BitPerSecond=1;
  KiloBitPerSecond=2;
  KiloBytePerSecond=3;
  MegaBitPerSecond=4;
  GigaBitPerSecond=5;
  MegaBytePerSecond=6;
  GigaBytePerSecond=7;

}